@use "sass:math";

/* 단위제거 */
@function remove-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

/* px to vw */
@function get-vw($value, $breakpoint, $margin: 0) {
  $breakpoint: $breakpoint - $margin;
  $value: remove-unit($value);
  @if type-of($value) == number {
    @return math.div(($value * 100), $breakpoint) * 1vw;
  } @else if type-of($value) == list {
    $vw: ();
    @each $val in $value {
      @if type-of($val) == number {
        $vw: append($vw, (math.div($val * 100), $breakpoint) * 1vw);
      } @else if type-of($val) == string {
        $vw: append($vw, $val);
      }
    }
    @return $vw;
  } @else {
    @return $value;
  }
}

/* px to vw :: max() */
@function get-vw-max($value, $max: 11px, $breakpoint, $margin: 0) {
  $breakpoint: $breakpoint - $margin;
  $value: remove-unit($value);
  @if type-of($value) == number {
    @return max($max, math.div(($value * 100), $breakpoint) * 1vw);
  } @else if type-of($value) == list {
    $vw: ();
    @each $val in $value {
      @if type-of($val) == number {
        $vw: append($vw, max($max, (math.div($val * 100), $breakpoint) * 1vw));
      } @else if type-of($val) == string {
        $vw: append($vw, max($max, $val));
      }
    }
    @return $vw;
  } @else {
    @return $value;
  }
}

/* px to vw :: min-width */
@function get-vw-min($value, $breakpoint, $breakpointMin, $margin: 0) {
  $breakpoint: $breakpoint - $margin;
  $value: remove-unit($value);
  @if type-of($value) == number {
    @return math.div(($value * $breakpointMin), $breakpoint) * 1px;
  } @else if type-of($value) == list {
    $vw: ();
    @each $val in $value {
      @if type-of($val) == number {
        $vw: append(
          $vw,
          math.div(($value * $breakpointMin), $breakpoint) * 1px
        );
      } @else if type-of($val) == string {
        $vw: append($vw, min($min, $val));
      }
    }
    @return $vw;
  } @else {
    @return $value;
  }
}

// viewport large size : px to vw
@function get-vw-l($value, $breakpoint: $viewport-l, $margin: 0) {
  @return get-vw($value, $breakpoint, $margin);
}

// viewport medium size : px to vw
@function get-vw-ml($value, $breakpoint: $viewport-ml, $margin: 0) {
  @return get-vw($value, $breakpoint, $margin);
}

// viewport medium size : px to vw
@function get-vw-m($value, $breakpoint: $viewport-m, $margin: 0) {
  @return get-vw($value, $breakpoint, $margin);
}

// viewport small size : px to vw
@function get-vw-s($value, $breakpoint: $viewport-s, $margin: 0) {
  @return get-vw($value, $breakpoint, $margin);
}

// viewport large size : px to max(vw)
@function get-vw-max-l($value, $max, $breakpoint: $viewport-l, $margin: 0) {
  @return get-vw-max($value, $max, $breakpoint, $margin);
}

// viewport medium size : px to max(vw)
@function get-vw-max-ml($value, $max, $breakpoint: $viewport-ml, $margin: 0) {
  @return get-vw-max($value, $max, $breakpoint, $margin);
}

// viewport medium size : px to max(vw)
@function get-vw-max-m($value, $max, $breakpoint: $viewport-m, $margin: 0) {
  @return get-vw-max($value, $max, $breakpoint, $margin);
}

// viewport small size : px to max(vw)
@function get-vw-max-s($value, $max, $breakpoint: $viewport-s, $margin: 0) {
  @return get-vw-max($value, $max, $breakpoint, $margin);
}

/* px to percent */
@function get-percent($value, $parent) {
  $value: remove-unit($value);
  @if type-of($value) == number {
    @return (math.div(($value * 100), $parent) * 1%);
  } @else if type-of($value) == list {
    $vw: ();
    @each $val in $value {
      @if type-of($val) == number {
        $vw: append($vw, (math.div(($val * 100), $parent)) * 1%);
      } @else if type-of($val) == string {
        $vw: append($vw, $val);
      }
    }
    @return $vw;
  } @else {
    @return $value;
  }
}

/* line-height 비율 값으로 변환 */
@function get-lh($fontSize, $lineHeight) {
  /* 폰트에 따라 잘리는 경우가 있어 최소값을 조금 높게 지정 */
  @return max(1, math.div(remove-unit($lineHeight), remove-unit($fontSize)));
}

/* Text stroke(text-shadow)  */
@function text-stroke(
  $size: 2,
  $color: #fff,
  $correction: 0,
  $unit: px,
  $viewport
) {
  $radius: $size - $correction;
  $stroke: ();

  @for $i from -$size through $size {
    @for $k from -$size through $size {
      $x: $k;
      $y: $i;

      @if $k > 0 {
        $x: $k - 0.5;
      } @else if $k < 0 {
        $x: $k + 0.5;
      }

      @if $i > 0 {
        $y: $i - 0.5;
      } @else if $i < 0 {
        $y: $i + 0.5;
      }

      @if ($x * $x + $y * $y <= $radius * $radius) {
        @if ($unit == px) {
          $stroke: append($stroke, $i * 1px $k * 1px 0 $color, comma);
        } @else {
          $stroke: append(
            $stroke,
            calc($i * 100 / $viewport * 1vw)
              calc($k * 100 / $viewport * 1vw)
              0
              $color,
            comma
          );
        }
      }
    }
  }

  @return $stroke;
}
